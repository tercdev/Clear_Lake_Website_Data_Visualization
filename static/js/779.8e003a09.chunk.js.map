{"version":3,"file":"static/js/779.8e003a09.chunk.js","mappings":"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","sources":["Components/pages/upload-csv/Uploader.js","Components/pages/upload-csv/LoginForm.js","Components/pages/upload-csv/LoginPage.js"],"sourcesContent":["import React from 'react';\r\nimport Dropzone from 'react-dropzone-uploader';\r\n\r\nimport 'react-dropzone-uploader/dist/styles.css';\r\nimport './Uploader.css';\r\n\r\n// API endpoint : https://swkt2vo9q1.execute-api.us-west-2.amazonaws.com/default/clearlake-getPresignedFileURL\r\n\r\nconst Uploader = () => {\r\n    const API_ENDPOINT = \"https://swkt2vo9q1.execute-api.us-west-2.amazonaws.com/default/clearlake-getPresignedFileURL\";\r\n    const axios = require('axios').default;\r\n\r\n    const handleChangeStatus = ({ meta, remove }, status) => {\r\n        console.log(status, meta);\r\n    }\r\n  \r\n    const handleSubmit = async (files) => {\r\n        console.log(files);\r\n        \r\n        for (let i = 0; i < files.length; i++) {\r\n          const f = files[i];\r\n          let parsedFileName = f['file'].name.toLowerCase().split(\"_\");\r\n          let fileName;\r\n          console.log(parsedFileName);\r\n\r\n          if ((parsedFileName[0] == \"met\") || (parsedFileName[0] == \"clearlake\")) {\r\n            fileName = parsedFileName[0] +\"/\"+ parsedFileName[1] +\"/\"+ f['file'].name;\r\n          } else if ((parsedFileName[0] == \"streams\")) {\r\n            fileName = parsedFileName[0] +\"/\"+ parsedFileName[1] +\"/\"+ parsedFileName[2] +\"/\" + f['file'].name;\r\n          } else {\r\n            fileName = f['file'].name\r\n          }\r\n\r\n          // GET request: presigned URL\r\n          // make access request \r\n          const response = await axios({\r\n              method: \"POST\",\r\n              url: API_ENDPOINT,\r\n              headers: { \r\n                'Content-Type': 'text/plain'\r\n              },\r\n              data: {\r\n                fileName: fileName\r\n              }\r\n          });\r\n\r\n          console.log(\"Response: \", response)\r\n\r\n          // PUT request: upload file to S3\r\n          // put the file into bucket\r\n\r\n          const result = await fetch(response.data.uploadURL, {\r\n              method: \"PUT\",\r\n              headers: {\r\n                  \"Content-Type\": \"text/csv\"\r\n              },\r\n              body: f['file']\r\n          })\r\n\r\n          console.log('Result: ', result);\r\n          f.remove();\r\n        }\r\n\r\n    }\r\n    return (\r\n      <div className='drop-container'>\r\n        <Dropzone\r\n          onChangeStatus={handleChangeStatus}\r\n          onSubmit={handleSubmit}\r\n          maxFiles={5}\r\n          accept='text/csv'\r\n          inputContent={(files, extra) => (extra.reject ? 'CSV files only' : 'Drag CSV Files')}\r\n          disabled={files => files.some(f => ['preparing', 'getting_upload_params', 'uploading'].includes(f.meta.status))}\r\n          styles={{\r\n            dropzoneReject: { borderColor: 'red', backgroundColor: '#DAA' },\r\n            inputLabel: (files, extra) => (extra.reject ? { color: 'red' } : {}),\r\n          }}\r\n          // multiple={true}\r\n          // canCancel={true}\r\n          // inputContent=\"Drop A File\"\r\n        >\r\n          \r\n        </Dropzone>  \r\n      </div>\r\n    )\r\n  }\r\n  \r\n  <Uploader />\r\n\r\nexport default Uploader","import React, {useState} from 'react';\r\nimport \"./LoginForm.css\";\r\n\r\n\r\nfunction LoginForm({Login, error}) {\r\n    const [details, setDetails] = useState({name:\"\", email:\"\", password:\"\"});\r\n\r\n    const submitHandler = (e) => {\r\n        e.preventDefault();\r\n        Login(details);\r\n    }\r\n\r\n    return (\r\n        <form onSubmit={submitHandler}>\r\n            <div className=\"form-inner\">\r\n                <h2>Login to upload</h2>\r\n                <div className=\"form-group\">\r\n                    <label className=\"form-label\" htmlFor='name'>Name:</label>\r\n                    <input className=\"form-input\" type=\"text\" name=\"name\" id=\"name\" onChange={e => setDetails({...details, name: e.target.value})} value={details.name} />\r\n                </div>\r\n                <div className=\"form-group\">\r\n                    <label className=\"form-label\" htmlFor='email'>Email:</label>\r\n                    <input className=\"form-input\" type=\"email\" name=\"email\" id=\"email\" onChange={e => setDetails({...details, email: e.target.value})} value={details.email} />\r\n                </div>\r\n                <div className=\"form-group\">\r\n                    <label className=\"form-label\" htmlFor='password'>Password:</label>\r\n                    <input className=\"form-input\" type=\"password\" name=\"password\" id=\"password\" onChange={e => setDetails({...details, password: e.target.value})} value={details.password} />\r\n                </div>\r\n                {error != \"\" ? <div className=\"error\">{error}</div> : \"\"}\r\n                <input className=\"submit-btn\" type=\"submit\" value=\"LOGIN\" />  \r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nexport default LoginForm","import React, { useState } from 'react';\r\nimport Uploader from './Uploader.js';\r\nimport LoginForm from './LoginForm';\r\nimport './LoginPage.css';\r\n\r\n\r\nexport default function LoginPage() {\r\n    const adminUser = {\r\n        email: \"admin@admin.com\",\r\n        password: \"admin123\"\r\n    }\r\n\r\n    const [user, setUser] = useState({name: \"\", email: \"\"});\r\n\r\n    // set message to display when error logging in\r\n    const [error, setError] = useState(\"\")\r\n\r\n    const Login = details => {\r\n        console.log(details);\r\n        if (details.email == adminUser.email && details.password == adminUser.password) {\r\n            console.log(\"logged in\");\r\n            setUser ({\r\n                name: details.name,\r\n                email: details.email\r\n            });\r\n        } else {\r\n            console.log(\"details not match\");\r\n            setError(\"Invalid login!\");\r\n        }\r\n    }\r\n\r\n    const Logout = () => {\r\n        console.log(\"log out\");\r\n        setUser ({\r\n            name: \"\",\r\n            email: \"\"\r\n        });\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div className='drop-csv-header'>\r\n                <h1 className='drop-title'>Upload CSV</h1>\r\n                <div className='drop-disclaimer'>\r\n                    <p>*Admin Use Only</p>\r\n                    <p className='drop-disclaimer1'>For all questions, please contact Dr. Alicia Cortes (alicortes@ucdavis.edu)</p>\r\n                </div>\r\n            </div>\r\n         \r\n            {(user.email != \"\") \r\n                ? ( // when user successfully logs in\r\n                    <div className='welcome-container'>\r\n                        <h2 className=\"welcome-header\">Welcome, <span>{user.name}</span>!</h2> \r\n                        <div className=\"reminder-container\">\r\n                            <h2 className=\"reminder-header\">Naming Convention for file uploads</h2>\r\n                            <p className=\"file-type\">Meterology Files:</p>\r\n                            <ul>\r\n                                <li>met_bkp_FROMdate_TOdate.csv</li>\r\n                                <li>met_bvr_FROMdate_TOdate.csv</li>\r\n                                <li>met_clo_FROMdate_TOdate.csv</li>\r\n                                <li>met_jgb_FROMdate_TOdate.csv</li>\r\n                                <li>met_knb_FROMdate_TOdate.csv</li>\r\n                                <li>met_nic_FROMdate_TOdate.csv</li>\r\n                                <li>met_nlp_FROMdate_TOdate.csv</li>\r\n                            </ul>\r\n                            <p className=\"file-type\">Stream Files:</p>\r\n                            <ul>\r\n                                <li>stream_kck_turb_FROMdate_TOdate.csv</li>\r\n                                <li>stream_mcu_turb_FROMdate_TOdate.csv</li>\r\n                                <li>stream_scs_turb_FROMdate_TOdate.csv</li>\r\n                                <li>Flow and Rain data will automatically be scraped and added into its corresponding table (no file upload needed)</li>\r\n                            </ul>\r\n                            <p className=\"file-type\">Lake Files:</p>\r\n                            <ul>\r\n                                <li>Profile Data (CTD)</li>\r\n                                <ul>\r\n                                    <li>ClearLake_ProfileData_FROMdate_TOdate.csv</li>\r\n                                </ul>\r\n                                <li>Lake Mooring (TChain) Oxygen</li>\r\n                                <ul>\r\n                                    <li>ClearLake_LA03oxygen_FROMdate_TOdate.csv</li>\r\n                                    <li>ClearLake_NR02oxygen_FROMdate_TOdate.csv</li>\r\n                                    <li>ClearLake_OA04oxygen_FROMdate_TOdate.csv</li>\r\n                                    <li>ClearLake_UA01oxygen_FROMdate_TOdate.csv</li>\r\n                                    <li>ClearLake_UA06oxygen_FROMdate_TOdate.csv</li>\r\n                                    <li>ClearLake_UA08oxygen_FROMdate_TOdate.csv</li>\r\n                                </ul>\r\n                                <li>Lake Mooring (TChain) Temperature</li>\r\n                                <ul>\r\n                                    <li>ClearLake_LA03temperature_FROMdate_TOdate.csv</li>\r\n                                    <li>ClearLake_NR02temperature_FROMdate_TOdate.csv</li>\r\n                                    <li>ClearLake_OA04temperature_FROMdate_TOdate.csv</li>\r\n                                    <li>ClearLake_UA01temperature_FROMdate_TOdate.csv</li>\r\n                                    <li>ClearLake_UA06temperature_FROMdate_TOdate.csv</li>\r\n                                    <li>ClearLake_UA08temperature_FROMdate_TOdate.csv</li>\r\n                                </ul>\r\n                            </ul>\r\n                        </div>\r\n\r\n                        <div className=\"reminder-container\">\r\n                            <h2 className=\"reminder-header\">Other reminders</h2>\r\n                            <ul>\r\n                                <li>Dropzone only accepts up to 5 CSV files at a time</li>\r\n                                <li>Files must be in .csv format</li>\r\n                                {/* <li>If you are uploading files with same name with same FROMdate and same TOdate (but the data contents changed), \r\n                                    please add extra unique characters at the end of file name. (Example: add _0, _1, _2 ... at end of filename)</li>\r\n                                <li>Why do this? The uploaded filenames must be unique to be inserted into database</li> */}\r\n                                <li>Once uploaded file, please verify database table on changes</li>\r\n                                <li>FROMdate and TOdate format: YearMonthDate (eg. 20220314)</li>\r\n                            </ul>\r\n                        </div>.\r\n                        \r\n                        <Uploader />\r\n                        <div className=\"logout-btn-container\">\r\n                            <button className=\"logout-btn\" onClick={Logout}>Logout</button>\r\n                        </div>\r\n                        \r\n                    </div>\r\n                )\r\n                :(<LoginForm Login={Login} error={error}/>)\r\n            }\r\n            \r\n        \r\n        </div>\r\n    )\r\n}"],"names":["Uploader","axios","require","handleSubmit","files","console","log","i","length","f","parsedFileName","name","toLowerCase","split","fileName","method","url","headers","data","response","fetch","uploadURL","body","result","remove","className","onChangeStatus","status","meta","onSubmit","maxFiles","accept","inputContent","extra","reject","disabled","some","includes","styles","dropzoneReject","borderColor","backgroundColor","inputLabel","color","Login","error","useState","email","password","details","setDetails","e","preventDefault","htmlFor","type","id","onChange","target","value","LoginPage","adminUser","user","setUser","setError","onClick"],"sourceRoot":""}